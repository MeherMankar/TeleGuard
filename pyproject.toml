[build-system]
requires = ["setuptools>=68.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "teleguard"
version = "2.0.0"
description = "Professional Telegram Account Manager with OTP Destroyer Protection"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Meher Mankar", email = "meherpatil84@gmail.com"},
    {name = "Gutkesh", email = "mirrorbot01@gmail.com"}
]
maintainers = [
    {name = "Meher Mankar", email = "meherpatil84@gmail.com"},
    {name = "Gutkesh", email = "mirrorbot01@gmail.com"}
]
keywords = [
    "telegram", "security", "otp", "account-manager", "protection",
    "automation", "bot", "multi-account", "2fa", "encryption"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Environment :: Console",
    "Framework :: AsyncIO",
    "Natural Language :: English",
    "Typing :: Typed"
]
requires-python = ">=3.8"
dependencies = [
    "telethon>=1.28.5",
    "cryptography>=43.0.1",
    "aiosqlite>=0.19.0",
    "sqlalchemy[asyncio]>=2.0.19",
    "argon2-cffi>=23.1.0",
    "pymongo>=4.6.3",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.9.0",
    "APScheduler>=3.10.4",
    "python-gnupg>=0.5.2",
    "aiofiles>=23.1.0",
    "pydantic>=2.0.0",
    "psutil>=5.9.5",
    "structlog>=23.1.0",
    "click>=8.1.0",
    "rich>=13.4.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=24.4.2",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.3",
    "twine>=4.0.0",
    "build>=0.10.0"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0"
]
monitoring = [
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.3"
]
web = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "jinja2>=3.1.0"
]
all = [
    "teleguard[dev,docs,monitoring,web]"
]

[project.urls]
Homepage = "https://github.com/MeherMankar/TeleGuard"
Documentation = "https://github.com/MeherMankar/TeleGuard/wiki"
Repository = "https://github.com/MeherMankar/TeleGuard"
"Bug Tracker" = "https://github.com/MeherMankar/TeleGuard/issues"
"Feature Requests" = "https://github.com/MeherMankar/TeleGuard/discussions"
Support = "https://t.me/ContactXYZrobot"
Changelog = "https://github.com/MeherMankar/TeleGuard/blob/main/CHANGELOG.md"
Funding = "https://github.com/sponsors/MeherMankar"

[project.scripts]
teleguard = "teleguard.main:main"
teleguard-cli = "teleguard.cli:main"

[project.entry-points."teleguard.plugins"]
# Plugin system for extensibility

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["teleguard*"]
exclude = ["tests*", "docs*", "examples*", "scripts*"]

[tool.setuptools.package-data]
teleguard = ["py.typed", "*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["teleguard"]
known_third_party = ["telethon", "cryptography", "sqlalchemy", "aiohttp"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_alphabetical_sort_within_sections = true
combine_as_imports = true
force_grid_wrap = 0
include_trailing_comma = true
use_parentheses = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=teleguard",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "telethon.*",
    "cryptography.*",
    "pymongo.*",
    "gnupg.*"
]
ignore_missing_imports = true

# bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "examples", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_start

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# coverage configuration
[tool.coverage.run]
source = ["teleguard"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/scripts/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]
branch = true
parallel = true

[tool.coverage.paths]
source = [
    "teleguard/",
    "*/site-packages/teleguard/"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2
skip_covered = false
skip_empty = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml)
# See setup.cfg for flake8 configuration
