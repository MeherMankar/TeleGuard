name: Database Sync

on:
  schedule:
    # Run hourly (disabled by default - uncomment to enable)
    # - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'sync'
        type: choice
        options:
        - sync
        - migrate
        - compact
      dry_run:
        description: 'Dry run (no actual changes)'
        required: false
        default: true
        type: boolean

env:
  USE_GITHUB_DB: true
  DB_GITHUB_OWNER: ${{ github.repository_owner }}
  DB_GITHUB_REPO: ${{ github.event.repository.name }}
  DB_GITHUB_BRANCH: db-live

jobs:
  database-sync:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt
        pip install responses pytest  # For testing

    - name: Validate environment
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Operation: ${{ github.event.inputs.operation || 'sync' }}"
        echo "Dry run: ${{ github.event.inputs.dry_run || 'true' }}"

    - name: Run database migration
      if: github.event.inputs.operation == 'migrate'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DB_WRITE_ALLOWED: ${{ github.event.inputs.dry_run == 'false' }}
        FERNET_KEY: ${{ secrets.FERNET_KEY }}
      run: |
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "🔄 Running migration in DRY RUN mode"
          python scripts/migrate_local_db_to_github.py --dry-run
        else
          echo "🔄 Running actual migration"
          python scripts/migrate_local_db_to_github.py
        fi

    - name: Run database compaction
      if: github.event.inputs.operation == 'compact'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DB_WRITE_ALLOWED: ${{ github.event.inputs.dry_run == 'false' }}
        ALLOW_FORCE_REPLACE: false  # Always use safe snapshot method in CI
      run: |
        echo "🧹 Running database compaction (snapshot method)"
        python scripts/compact_db_branch.py --snapshot

    - name: Run database sync
      if: github.event.inputs.operation == 'sync' || github.event.inputs.operation == ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DB_WRITE_ALLOWED: false  # Sync is read-only by default
      run: |
        echo "🔄 Running database sync check"
        python -c "
        import os
        from teleguard.github_db import GitHubJSONDB

        db = GitHubJSONDB(
            owner=os.getenv('DB_GITHUB_OWNER'),
            repo=os.getenv('DB_GITHUB_REPO'),
            token=os.getenv('GITHUB_TOKEN'),
            branch=os.getenv('DB_GITHUB_BRANCH'),
            write_allowed=False
        )

        # Test connection and list files
        try:
            rate_limit = db._get_rate_limit()
            print(f'✅ GitHub API connection successful')
            print(f'📊 Rate limit: {rate_limit.remaining}/{rate_limit.limit}')

            # Try to read a test file
            data, sha = db.get_json('db/user_settings.json')
            print(f'📄 Test file read: {len(str(data))} chars, SHA: {sha[:8] if sha else None}')

        except Exception as e:
            print(f'❌ Database sync check failed: {e}')
            exit(1)
        "

    - name: Run tests
      run: |
        echo "🧪 Running database tests"
        python -m pytest tests/test_github_db.py -v

    - name: Security check
      run: |
        echo "🔒 Running security checks"

        # Check for accidentally committed secrets
        if grep -r "ghp_" . --exclude-dir=.git --exclude="*.md" --exclude=".env.example"; then
          echo "❌ Found potential GitHub token in code!"
          exit 1
        fi

        if grep -r "AKIA" . --exclude-dir=.git --exclude="*.md" --exclude=".env.example"; then
          echo "❌ Found potential AWS key in code!"
          exit 1
        fi

        echo "✅ No secrets found in code"

    - name: Generate report
      if: always()
      run: |
        echo "📋 Database Sync Report" > sync-report.md
        echo "======================" >> sync-report.md
        echo "" >> sync-report.md
        echo "- **Repository**: ${{ github.repository }}" >> sync-report.md
        echo "- **Operation**: ${{ github.event.inputs.operation || 'sync' }}" >> sync-report.md
        echo "- **Dry Run**: ${{ github.event.inputs.dry_run || 'true' }}" >> sync-report.md
        echo "- **Timestamp**: $(date -u)" >> sync-report.md
        echo "- **Workflow**: ${{ github.run_id }}" >> sync-report.md

        cat sync-report.md

    - name: Upload report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: database-sync-report
        path: sync-report.md
        retention-days: 30

  # Separate job for cleanup (runs weekly)
  database-cleanup:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * 0'  # Weekly on Sunday at 2 AM

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements.txt

    - name: Run cleanup
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DB_WRITE_ALLOWED: true
        ALLOW_FORCE_REPLACE: false  # Only safe snapshot method
      run: |
        echo "🧹 Running weekly database cleanup"
        python scripts/compact_db_branch.py --snapshot
